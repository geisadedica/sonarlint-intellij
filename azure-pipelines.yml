pool:
  vmImage: 'ubuntu-latest'

variables:
  - group: sonarsource-build-variables

resources:
  repositories:
    - repository: commonTemplates
      type: git
      name: pipelines-yaml-templates
      ref:  refs/tags/v1.0.9


stages:
- template: stage-with-burgr-notifications.yml@commonTemplates
  parameters:
    burgrName: 'build'
    burgrType: 'build'
    stageName: 'build'
    stageDisplayName: Build and stage to repox
    jobs:
    - job: build
      displayName: Build and stage to repox
      variables:
        fixedBranch: $[replace(variables['Build.SourceBranch'], 'refs/heads/', '')]
      steps:
      - checkout: self
        fetchDepth: 1
      - template: update-gradle-version-steps.yml
      - task: Gradle@2
        inputs:
          options: --stacktrace -i
          tasks: buildPlugin artifactoryPublish
          publishJUnitResults: false
          jdkVersionOption: '1.11'
        env:
          ARTIFACTORY_DEPLOY_USERNAME: $(ARTIFACTORY_DEPLOY_USERNAME)
          ARTIFACTORY_DEPLOY_PASSWORD: $(ARTIFACTORY_DEPLOY_PASSWORD)
          GIT_SHA1: $(Build.SourceVersion)
          GITHUB_BRANCH: $(fixedBranch)
        displayName: 'Run Gradle build and deploy'
- template: stage-with-burgr-notifications.yml@commonTemplates
  parameters:
    burgrName: 'qa'
    burgrType: 'qa'
    stageName: 'qa'
    stageDisplayName: Run ITs
    stageDependencies: build
    jobs:
    - job: its
      displayName: Run ITs
      strategy:
        matrix:
#          Idea2018:
#            IDEA_VERSION: 'IC-2018.3'
#            JDKVersion: '1.11'
#          Idea2019:
#            IDEA_VERSION: 'IC-2019.3'
#            JDKVersion: '1.11'
          Idea2020:
            IDEA_VERSION: 'IC-2020.1.2'
            JDKVersion: '1.11'
            imageName: 'ubuntu-latest'
#          IdeaEAP:
#            IDEA_VERSION: 'LATEST-EAP-SNAPSHOT'
#            JDKVersion: '1.11'
      steps:
      - checkout: self
        fetchDepth: 1
      - template: update-gradle-version-steps.yml
      - task: DownloadSecureFile@1
        displayName: 'Download Maven settings'
        name: mavenSettings
        inputs:
          secureFile: 'maven-settings.xml'
      - bash: |
          mvn org.apache.maven.plugins:maven-dependency-plugin:3.1.1:unpack -B --settings "$(mavenSettings.secureFilePath)" -Denable-repo=qa -Dartifact=org.sonarsource.sonarlint.intellij:sonarlint-intellij:$(PROJECT_VERSION):zip "-DoutputDirectory=$(Agent.BuildDirectory)/staged-plugin"
        displayName: 'Download staged plugin'
        env:
          ARTIFACTORY_QA_READER_USERNAME: $(ARTIFACTORY_QA_READER_USERNAME)
          ARTIFACTORY_QA_READER_PASSWORD: $(ARTIFACTORY_QA_READER_PASSWORD)
      - bash: |
          set -e -o pipefail -u
          command -v nc || {
              sudo apt-get update && sudo apt-get install -y netcat
          }
          command -v xauth || {
            sudo apt-get update && sudo apt-get install -y xauth
          }
          command -v xvfb-run || {
              sudo apt-get update && sudo apt-get install -y xvfb
          }
          dir="~/.java/.userPrefs/jetbrains/_!(!!cg\"p!(}!}@\"j!(k!|w\"w!'8!b!\"p!':!e@=="
          mkdir -p "$dir"
          echo '<?xml version="1.0" encoding="UTF-8" standalone="no"?>
          <!DOCTYPE map SYSTEM "http://java.sun.com/dtd/preferences.dtd">
          <map MAP_XML_VERSION="1.0">
            <entry key="accepted_version" value="2.1"/>
            <entry key="eua_accepted_version" value="1.1"/>
            <entry key="privacyeap_accepted_version" value="2.1"/>
          </map>' > "$dir/prefs.xml"
          cd its
          source utils.sh
          log=~/gradlew-runIdeForUiTests.log
          nohup xvfb-run --auto-servernum ./gradlew --stacktrace --info -PijVersion=$(IDEA_VERSION) "-PslPluginLocation=$(Agent.BuildDirectory)/staged-plugin/sonarlint-intellij" runIdeForUiTests >$log 2>&1 &
          # $! expands to the PID of the last process executed in the background
          ide_pid=$!

          # The test will gracefully close the IDE instance if successful,
          # but we still need to kill the IDE instance in case that test was not successful AND the IDE is still running.
          function finish {
            if ps -p $ide_pid >/dev/null 2>&1; then
              kill $ide_pid
            fi
          }
          trap finish EXIT

          last_line=0
          # Let's wait until Remote Robot plugin living within the IDE starts listening.
          info 'Logs of gradle runIdeForUiTests'
          while ! nc -z localhost 8082; do
            sleep 0.5
            tail -n+$((last_line+1)) $log
            last_line=$(wc -l < $log)
          done

          info 'Logs of gradle test'
          ./gradlew --info -PijVersion=$(IDEA_VERSION) test || {
            info 'Logs of IDE under test'
            cat /build/idea-sandbox/system/log/idea.log
            die 'UI tests failed; inspect Gradle and IDE logs above'
          }
        displayName: 'Run UI tests on $(IDEA_VERSION)'
      - bash: |
          set -e
          cd its
          cat build/idea-sandbox/system/log/idea.log
        displayName: 'Log'
        condition: always()
- template: promote-stage.yml@commonTemplates
  parameters:
    stageDependencies:
    - validate
    - qa
- template: stage-with-burgr-notifications.yml@commonTemplates
  parameters:
    burgrName: 'dogfood'
    burgrType: 'dogfood'
    stageName: 'update_dogfood_repo'
    stageDisplayName: Update internal dogfooding plugin repo
    stageCondition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'master'))
    stageDependencies: promote
    jobs:
    - job: updateInternalSite
      displayName: Update internal plugin repo on repox
      steps:
        - checkout: none
        - task: UsePythonVersion@0
          inputs:
            versionSpec: '3.x'
        - bash: pip3 install requests
        - task: PythonScript@0
          name: updateInternalSiteOnRepox
          inputs:
            scriptSource: 'inline'
            script: |
              import requests
              import os
              import sys
              import json

              githubSlug = '$(Build.Repository.ID)'
              githubProject = githubSlug.split("/", 1)[1]
              buildNumber = '$(Build.BuildId)'

              buildInfoUrl = f'$(ARTIFACTORY_URL)/api/build/{githubProject}/{buildNumber}'
              buildInfoResp = requests.get(url=buildInfoUrl, auth=('$(ARTIFACTORY_API_USER)', '$(ARTIFACTORY_API_KEY)'))
              buildInfoJson = buildInfoResp.json()

              buildInfo = buildInfoJson.get('buildInfo', {})
              buildInfoProperties = buildInfo.get('properties', {})

              # PROJECT_VERSION is set by the compute-build-version-step.yml
              version = buildInfoProperties.get('buildInfo.env.PROJECT_VERSION', 'NOT_FOUND')

              xml = f"""<plugins>
                <plugin id="org.sonarlint.idea" url="$(ARTIFACTORY_URL)/sonarsource/org/sonarsource/sonarlint/intellij/sonarlint-intellij/{version}/sonarlint-intellij-{version}.zip" version="{version}"/>
              </plugins>"""

              updatePluginsXmlUrl = "$(ARTIFACTORY_URL)/sonarsource-public-builds/org/sonarsource/sonarlint/intellij/sonarlint-intellij/updatePlugins.xml"
              response = requests.put(url=updatePluginsXmlUrl, data=xml, auth=('$(ARTIFACTORY_API_USER)', '$(ARTIFACTORY_API_KEY)'))
              if not response.status_code == 201:
                sys.exit('[!] [{0}] Server Error'.format(response.status_code))
